{
  "info": {
    "_postman_id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
    "name": "Antbox Aspects API",
    "description": "Aspects management endpoints for Antbox - aspects are reusable components that can be attached to nodes to extend their functionality.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "34567890"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Root Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has JWT token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('jwt');",
                  "    pm.expect(jsonData.jwt).to.be.a('string');",
                  "    pm.expect(jsonData.jwt.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Store JWT token for subsequent requests\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.jwt) {",
                  "        pm.collectionVariables.set(\"jwt_token\", jsonData.jwt);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{root_password_hash}}"
            },
            "url": {
              "raw": "{{base_url}}/login/root",
              "host": ["{{base_url}}"],
              "path": ["login", "root"]
            },
            "description": "Authenticate as root user using SHA256 hashed password"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for Antbox API"
    },
    {
      "name": "Aspect Management",
      "item": [
        {
          "name": "List All Aspects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Aspects have required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        var aspect = jsonData[0];",
                  "        pm.expect(aspect).to.have.property('uuid');",
                  "        pm.expect(aspect).to.have.property('fid');",
                  "        pm.expect(aspect).to.have.property('title');",
                  "        pm.expect(aspect).to.have.property('mimetype');",
                  "        pm.expect(aspect).to.have.property('owner');",
                  "        pm.expect(aspect).to.have.property('createdTime');",
                  "        pm.expect(aspect).to.have.property('modifiedTime');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Store first aspect UUID for subsequent tests\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.collectionVariables.set(\"aspect_uuid\", jsonData[0].uuid);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects?limit={{limit}}&offset={{offset}}",
              "host": ["{{base_url}}"],
              "path": ["aspects"],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Maximum number of aspects to return"
                },
                {
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Number of aspects to skip"
                }
              ]
            },
            "description": "Retrieve a paginated list of all aspects in the system"
          },
          "response": []
        },
        {
          "name": "Create Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has aspect properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uuid');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('mimetype');",
                  "    pm.expect(jsonData).to.have.property('fid');",
                  "});",
                  "",
                  "pm.test(\"Store created aspect UUID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.uuid) {",
                  "        pm.collectionVariables.set(\"created_aspect_uuid\", jsonData.uuid);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Aspect has correct properties from request\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql('Test Aspect');",
                  "    pm.expect(jsonData.mimetype).to.eql('application/javascript');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Aspect\",\n    \"description\": \"A test aspect created via Postman for testing purposes\",\n    \"mimetype\": \"application/javascript\",\n    \"parent\": \"{{aspects_parent_uuid}}\",\n    \"tags\": [\"test\", \"postman\", \"aspect\"],\n    \"aspects\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/aspects",
              "host": ["{{base_url}}"],
              "path": ["aspects"]
            },
            "description": "Create a new aspect in the system"
          },
          "response": []
        },
        {
          "name": "Get Aspect by UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has aspect properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uuid');",
                  "    pm.expect(jsonData).to.have.property('fid');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('mimetype');",
                  "    pm.expect(jsonData).to.have.property('size');",
                  "    pm.expect(jsonData).to.have.property('parent');",
                  "    pm.expect(jsonData).to.have.property('createdTime');",
                  "    pm.expect(jsonData).to.have.property('modifiedTime');",
                  "    pm.expect(jsonData).to.have.property('owner');",
                  "    pm.expect(jsonData).to.have.property('permissions');",
                  "});",
                  "",
                  "pm.test(\"UUID matches request parameter\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var requestedUuid = pm.request.url.path[1];",
                  "    pm.expect(jsonData.uuid).to.eql(requestedUuid);",
                  "});",
                  "",
                  "pm.test(\"Aspect has tags array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tags');",
                  "    pm.expect(jsonData.tags).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Aspect has aspects array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aspects');",
                  "    pm.expect(jsonData.aspects).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/{{aspect_uuid}}",
              "host": ["{{base_url}}"],
              "path": ["aspects", "{{aspect_uuid}}"]
            },
            "description": "Retrieve a specific aspect by its UUID"
          },
          "response": []
        },
        {
          "name": "Update Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated aspect properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uuid');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "});",
                  "",
                  "pm.test(\"Title was updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.include('Updated');",
                  "});",
                  "",
                  "pm.test(\"Tags were updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tags).to.include('updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Test Aspect\",\n    \"description\": \"An updated test aspect via Postman with enhanced functionality\",\n    \"tags\": [\"test\", \"postman\", \"aspect\", \"updated\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/aspects/{{aspect_uuid}}",
              "host": ["{{base_url}}"],
              "path": ["aspects", "{{aspect_uuid}}"]
            },
            "description": "Update an existing aspect"
          },
          "response": []
        },
        {
          "name": "Delete Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates success\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/{{created_aspect_uuid}}",
              "host": ["{{base_url}}"],
              "path": ["aspects", "{{created_aspect_uuid}}"]
            },
            "description": "Delete an aspect by its UUID"
          },
          "response": []
        }
      ],
      "description": "Basic CRUD operations for aspects"
    },
    {
      "name": "Aspect Operations",
      "item": [
        {
          "name": "Export Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response content type is JavaScript\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/javascript');",
                  "});",
                  "",
                  "pm.test(\"Response has Content-Disposition header\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});",
                  "",
                  "pm.test(\"Response has content\", function () {",
                  "    pm.expect(pm.response.text()).to.have.length.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Exported content appears to be JavaScript\", function () {",
                  "    var responseText = pm.response.text();",
                  "    // Check for common JavaScript patterns",
                  "    var hasJavaScriptContent = responseText.includes('function') || ",
                  "                              responseText.includes('const') || ",
                  "                              responseText.includes('var') ||",
                  "                              responseText.includes('=>');",
                  "    pm.expect(hasJavaScriptContent).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/{{aspect_uuid}}/-/export",
              "host": ["{{base_url}}"],
              "path": ["aspects", "{{aspect_uuid}}", "-", "export"]
            },
            "description": "Export aspect as JavaScript file"
          },
          "response": []
        },
        {
          "name": "Export Aspect with Custom Filename",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Disposition includes custom filename\", function () {",
                  "    var contentDisposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(contentDisposition).to.include('attachment');",
                  "    // Should include the aspect UUID in filename",
                  "    var aspectUuid = pm.collectionVariables.get('aspect_uuid');",
                  "    pm.expect(contentDisposition).to.include(aspectUuid);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/{{aspect_uuid}}/-/export",
              "host": ["{{base_url}}"],
              "path": ["aspects", "{{aspect_uuid}}", "-", "export"]
            },
            "description": "Export aspect with automatically generated filename based on UUID"
          },
          "response": []
        }
      ],
      "description": "Operations that can be performed on aspects"
    },
    {
      "name": "Aspect Search & Filtering",
      "item": [
        {
          "name": "Find JavaScript Aspects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All returned aspects are JavaScript\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(aspect) {",
                  "            pm.expect(aspect.mimetype).to.eql('application/javascript');",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Aspects have required structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        var aspect = jsonData[0];",
                  "        pm.expect(aspect).to.have.property('uuid');",
                  "        pm.expect(aspect).to.have.property('title');",
                  "        pm.expect(aspect).to.have.property('fid');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects?mimetype=application/javascript&limit=50",
              "host": ["{{base_url}}"],
              "path": ["aspects"],
              "query": [
                {
                  "key": "mimetype",
                  "value": "application/javascript",
                  "description": "Filter by MIME type"
                },
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Maximum number of results"
                }
              ]
            },
            "description": "Find all JavaScript aspects in the system"
          },
          "response": []
        },
        {
          "name": "Find Aspects by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All returned aspects have the test tag\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(aspect) {",
                  "            pm.expect(aspect.tags).to.include('test');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects?tags=test&limit=25",
              "host": ["{{base_url}}"],
              "path": ["aspects"],
              "query": [
                {
                  "key": "tags",
                  "value": "test",
                  "description": "Filter by tag"
                },
                {
                  "key": "limit",
                  "value": "25",
                  "description": "Maximum number of results"
                }
              ]
            },
            "description": "Find aspects tagged with 'test'"
          },
          "response": []
        },
        {
          "name": "Find Recent Aspects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Aspects are ordered by modification time\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 1) {",
                  "        for (let i = 1; i < jsonData.length; i++) {",
                  "            var currentTime = new Date(jsonData[i].modifiedTime);",
                  "            var previousTime = new Date(jsonData[i-1].modifiedTime);",
                  "            pm.expect(currentTime.getTime()).to.be.at.most(previousTime.getTime());",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects?sort=modifiedTime&order=desc&limit=10",
              "host": ["{{base_url}}"],
              "path": ["aspects"],
              "query": [
                {
                  "key": "sort",
                  "value": "modifiedTime",
                  "description": "Sort by modification time"
                },
                {
                  "key": "order",
                  "value": "desc",
                  "description": "Descending order (newest first)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Get 10 most recent aspects"
                }
              ]
            },
            "description": "Find the 10 most recently modified aspects"
          },
          "response": []
        }
      ],
      "description": "Search and filtering operations for aspects"
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Get Non-existent Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errorCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test(\"Error message is descriptive\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "    pm.expect(jsonData.message.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["aspects", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test 404 error for non-existent aspect"
          },
          "response": []
        },
        {
          "name": "Create Aspect with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errorCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test(\"Error indicates validation problem\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errorCode).to.include('VALIDATION');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"\",\n    \"parent\": \"invalid-uuid-format\",\n    \"mimetype\": \"invalid/mimetype\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/aspects",
              "host": ["{{base_url}}"],
              "path": ["aspects"]
            },
            "description": "Test validation error with invalid aspect data"
          },
          "response": []
        },
        {
          "name": "Export Non-existent Aspect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errorCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects/00000000-0000-0000-0000-000000000000/-/export",
              "host": ["{{base_url}}"],
              "path": [
                "aspects",
                "00000000-0000-0000-0000-000000000000",
                "-",
                "export"
              ]
            },
            "description": "Test export of non-existent aspect"
          },
          "response": []
        },
        {
          "name": "Unauthorized Aspect Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errorCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test(\"Error indicates authentication problem\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errorCode).to.include('UNAUTHORIZED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/aspects",
              "host": ["{{base_url}}"],
              "path": ["aspects"]
            },
            "description": "Test unauthorized access without JWT token"
          },
          "response": []
        }
      ],
      "description": "Error handling and edge case tests for aspects"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for aspects collection",
          "// Set default values if not already set",
          "if (!pm.collectionVariables.get('limit')) {",
          "    pm.collectionVariables.set('limit', '20');",
          "}",
          "if (!pm.collectionVariables.get('offset')) {",
          "    pm.collectionVariables.set('offset', '0');",
          "}",
          "",
          "// Generate a timestamp for unique test data",
          "pm.collectionVariables.set('timestamp', Date.now().toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for aspects collection",
          "pm.test(\"Response time is reasonable for aspects\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.collectionVariables.get('api_timeout')));",
          "});",
          "",
          "pm.test(\"Response has proper headers\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
          "});",
          "",
          "// Log response for debugging in development",
          "if (pm.collectionVariables.get('environment') === 'development') {",
          "    console.log('Response Status:', pm.response.status);",
          "    console.log('Response Time:', pm.response.responseTime + 'ms');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:7180",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "root_password_hash",
      "value": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
      "type": "string"
    },
    {
      "key": "aspect_uuid",
      "value": "550e8400-e29b-41d4-a716-446655440003",
      "type": "string"
    },
    {
      "key": "created_aspect_uuid",
      "value": "",
      "type": "string"
    },
    {
      "key": "aspects_parent_uuid",
      "value": "550e8400-e29b-41d4-a716-446655440020",
      "type": "string"
    },
    {
      "key": "limit",
      "value": "20",
      "type": "string"
    },
    {
      "key": "offset",
      "value": "0",
      "type": "string"
    },
    {
      "key": "api_timeout",
      "value": "5000",
      "type": "string"
    },
    {
      "key": "environment",
      "value": "development",
      "type": "string"
    },
    {
      "key": "timestamp",
      "value": "",
      "type": "string"
    }
  ]
}
