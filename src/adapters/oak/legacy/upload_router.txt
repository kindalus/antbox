import { type Context, Router } from "@oak/oak";
import type { AntboxTenant } from "api/antbox_tenant.ts";
import type { NodeMetadata } from "domain/nodes/node_metadata.ts";
import { Nodes } from "domain/nodes/nodes.ts";
import { readFileSync } from "fs";
import { type Either, left, right } from "shared/either.ts";
import { ContextWithParams } from "./context_with_params.ts";
import { getTenant } from "./get_tenant.ts";
import { processEither } from "./process_either.ts";
import { processError } from "api/process_error.ts";
import { sendBadRequest, sendOK } from "./send_response.ts";

export default function (tenants: AntboxTenant[]) {
  const createNodeFileHandler = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).nodeService;

    const fieldsOrUndefined = await readRequest(ctx);
    if (fieldsOrUndefined.isLeft()) {
      return sendBadRequest(ctx);
    }

    if (!fieldsOrUndefined.value.metadata) {
      return sendBadRequest(ctx);
    }

    return service
      .createFile(
        ctx,
        fieldsOrUndefined.value.file,
        fieldsOrUndefined.value.metadata,
      )
      .then((result) => {
        if (result.isLeft()) {
          return processError(result.value);
        }

        sendOK(ctx, result.value);
      })
      .catch((err) => processError(err));
  };

  const updateNodeFileHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).nodeService;
    const fieldsOrUndefined = await readRequest(ctx);

    if (fieldsOrUndefined.isLeft()) {
      return sendBadRequest(ctx);
    }

    return service
      .updateFile(ctx, ctx.params.uuid, fieldsOrUndefined.value.file)
      .then((result) => {
        if (result.isLeft()) {
          return processError(result.value);
        }

        sendOK(ctx);
      })
      .catch((err) => processError(err));
  };

  const createOrReplaceAction = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).nodeService;

    const fieldsOrUndefined = await readRequest(ctx);
    if (fieldsOrUndefined.isLeft()) {
      return sendBadRequest(ctx);
    }

    return service
      .createFile(
        ctx,
        fieldsOrUndefined.value.file,
        fieldsOrUndefined.value.metadata!,
      )
      .then((result) => processEither(ctx, result))
      .catch((err) => processError(err));
  };

  const createOrReplaceExtension = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).nodeService;

    const fieldsOrUndefined = await readRequest(ctx);
    if (fieldsOrUndefined.isLeft()) {
      return sendBadRequest(ctx);
    }

    return service
      .createFile(
        ctx,
        fieldsOrUndefined.value.file,
        fieldsOrUndefined.value.metadata!,
      )
      .then((result) => processEither(ctx, result))
      .catch((err) => processError(err));
  };

  const uploadRouter = new Router({ prefix: "/upload" });

  uploadRouter.post("/nodes", createNodeFileHandler);
  uploadRouter.post("/nodes/:uuid", updateNodeFileHandler);

  uploadRouter.post("/actions", createOrReplaceAction);
  uploadRouter.post("/ext", createOrReplaceExtension);

  return uploadRouter;
}

async function readRequest(
  ctx: Context,
): Promise<
  Either<undefined, { file: File; metadata?: Partial<NodeMetadata> }>
> {
  const body = ctx.request.body();
  if (body.type !== "form-data") {
    return left(undefined);
  }

  const { files } = await (body.value! as FormDataReader).read({
    maxFileSize: 100 * 1024 ** 2,
    customContentTypes: {
      "text/javascript": "js",
      [Nodes.EXT_MIMETYPE]: "js",
      [Nodes.ASPECT_MIMETYPE]: "json",
      [Nodes.ACTION_MIMETYPE]: "js",
      [Nodes.SMART_FOLDER_MIMETYPE]: "json",
    },
  });

  const metadataUploaded = files?.find((f) => f.name === "metadata");
  const fileUploaded = files?.find((f) => f.name === "file");

  if (!fileUploaded) {
    return left(undefined);
  }

  const fileContent = readFileSync(fileUploaded.filename!);

  let metadata: Partial<NodeMetadata> | undefined = undefined;
  if (metadataUploaded) {
    const metadataContent = readFileSync(metadataUploaded.filename!);
    metadata = JSON.parse(new TextDecoder().decode(metadataContent));
  }

  const file = new File([fileContent], fileUploaded.originalName, {
    type: fileUploaded.contentType,
  });

  return right({ file, metadata });
}
