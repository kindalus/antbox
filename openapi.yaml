openapi: 3.1.0
info:
  title: Antbox API
  version: "2.0.0"
  description: REST API for Antbox
servers:
  - url: /v2
    description: API server
security:
  - bearerAuth: []
tags:
  - name: actions
    description: Operations related to actions
  - name: agents
    description: Operations related to AI agents
  - name: api-keys
    description: Operations related to API keys
  - name: aspects
    description: Operations related to aspects
  - name: docs
    description: API documentation
  - name: extensions
    description: Operations related to extensions
  - name: features
    description: Operations related to features
  - name: groups
    description: Operations related to user groups
  - name: login
    description: Authentication operations
  - name: nodes
    description: Operations related to nodes (files, folders, etc.)
  - name: templates
    description: Operations related to templates
  - name: users
    description: Operations related to users
paths:
  /actions:
    get:
      tags:
        - actions
      summary: List available actions
      operationId: listActions
      responses:
        "200":
          description: A list of action nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/actions/{uuid}/-/run":
    post:
      tags:
        - actions
      summary: Run an action
      operationId: runAction
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuids:
                  type: array
                  items:
                    type: string
                    format: uuid
                parameters:
                  type: object
                  additionalProperties: true
      responses:
        "200":
          description: Action executed successfully
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: "#/components/responses/Error"
  /agents:
    get:
      tags:
        - agents
      summary: List all agents
      operationId: listAgents
      responses:
        "200":
          description: A list of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
        default:
          $ref: "#/components/responses/Error"
  "/agents/-/upload":
    post:
      tags:
        - agents
      summary: Create or replace an agent
      operationId: createOrReplaceAgent
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: A JSON file containing the agent's metadata.
      responses:
        "200":
          description: Agent created or replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        default:
          $ref: "#/components/responses/Error"
  "/agents/rag/-/chat":
    post:
      tags:
        - agents
      summary: Chat with the RAG service
      operationId: ragChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                options:
                  type: object
                  additionalProperties: true
      responses:
        "200":
          description: RAG chat response
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: "#/components/responses/Error"
  "/agents/{uuid}":
    get:
      tags:
        - agents
      summary: Get an agent
      operationId: getAgent
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - agents
      summary: Delete an agent
      operationId: deleteAgent
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: Agent deleted successfully
        default:
          $ref: "#/components/responses/Error"
  "/agents/{uuid}/-/answer":
    post:
      tags:
        - agents
      summary: Get a structured answer from an agent
      operationId: answer
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                options:
                  $ref: "#/components/schemas/AnswerOptions"
      responses:
        "200":
          description: Agent answer
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: "#/components/responses/Error"
  "/agents/{uuid}/-/chat":
    post:
      tags:
        - agents
      summary: Chat with an agent
      operationId: chat
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                options:
                  $ref: "#/components/schemas/ChatOptions"
      responses:
        "200":
          description: Agent chat response
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: "#/components/responses/Error"
  /api-keys:
    get:
      tags:
        - api-keys
      summary: List API keys
      operationId: listApiKeys
      responses:
        "200":
          description: A list of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
        default:
          $ref: "#/components/responses/Error"
    post:
      tags:
        - api-keys
      summary: Create an API key
      operationId: createApiKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group
              properties:
                group:
                  type: string
                  format: uuid
                description:
                  type: string
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          $ref: "#/components/responses/Error"
  "/api-keys/{uuid}":
    get:
      tags:
        - api-keys
      summary: Get an API key
      operationId: getApiKey
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: API key details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - api-keys
      summary: Delete an API key
      operationId: deleteApiKey
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: API key deleted
        default:
          $ref: "#/components/responses/Error"
  /aspects:
    get:
      tags:
        - aspects
      summary: List aspects
      operationId: listAspects
      responses:
        "200":
          description: A list of aspects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Aspect"
        default:
          $ref: "#/components/responses/Error"
  "/aspects/-/upload":
    post:
      tags:
        - aspects
      summary: Create or replace an aspect
      operationId: createOrReplaceAspect
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: A JSON file containing the aspect's metadata.
      responses:
        "200":
          description: Aspect created or replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aspect"
        default:
          $ref: "#/components/responses/Error"
  "/aspects/{uuid}":
    get:
      tags:
        - aspects
      summary: Get an aspect
      operationId: getAspect
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Aspect details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aspect"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - aspects
      summary: Delete an aspect
      operationId: deleteAspect
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: Aspect deleted
        default:
          $ref: "#/components/responses/Error"
  "/aspects/{uuid}/-/export":
    get:
      tags:
        - aspects
      summary: Export an aspect
      operationId: exportAspect
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Aspect exported successfully
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          $ref: "#/components/responses/Error"
  /docs:
    get:
      tags:
        - docs
      summary: List available documentation
      operationId: listDocs
      responses:
        "200":
          description: A list of available documentation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocInfo"
        default:
          $ref: "#/components/responses/Error"
  "/docs/openapi.yaml":
    get:
      tags:
        - docs
      summary: Get OpenAPI specification
      operationId: getOpenApiSpec
      responses:
        "200":
          description: OpenAPI specification file
          content:
            application/yaml:
              schema:
                type: string
  "/docs/{uuid}":
    get:
      tags:
        - docs
      summary: Get a document
      operationId: getDoc
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Document content
          content:
            text/markdown:
              schema:
                type: string
            text/html:
              schema:
                type: string
        default:
          $ref: "#/components/responses/Error"
  /extensions:
    get:
      tags:
        - extensions
      summary: List all extensions
      operationId: listExtensions
      responses:
        "200":
          description: A list of extensions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/extensions/{uuid}/-/exec":
    post:
      tags:
        - extensions
      summary: Run an extension
      operationId: runExtension
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Extension run result
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: "#/components/responses/Error"
  /features:
    get:
      tags:
        - features
      summary: List features
      operationId: listFeatures
      responses:
        "200":
          description: A list of features
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FeatureNode"
        default:
          $ref: "#/components/responses/Error"
  "/features/-/upload":
    post:
      tags:
        - features
      summary: Create or replace a feature
      operationId: createOrReplaceFeature
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: A JSON file containing the feature's metadata.
      responses:
        "200":
          description: Feature created or replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureNode"
        default:
          $ref: "#/components/responses/Error"
  "/features/{uuid}":
    get:
      tags:
        - features
      summary: Get a feature
      operationId: getFeature
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Feature details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureNode"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - features
      summary: Delete a feature
      operationId: deleteFeature
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: Feature deleted
        default:
          $ref: "#/components/responses/Error"
  "/features/{uuid}/-/export":
    get:
      tags:
        - features
      summary: Export a feature
      operationId: exportFeature
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Feature exported successfully
          content:
            application/json:
              schema:
                type: string
                format: binary
        default:
          $ref: "#/components/responses/Error"
  /groups:
    get:
      tags:
        - groups
      summary: List groups
      operationId: listGroups
      responses:
        "200":
          description: A list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    post:
      tags:
        - groups
      summary: Create a group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/groups/{uuid}":
    get:
      tags:
        - groups
      summary: Get a group
      operationId: getGroup
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Group details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    put:
      tags:
        - groups
      summary: Update a group
      operationId: updateGroup
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - groups
      summary: Delete a group
      operationId: deleteGroup
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: Group deleted
        default:
          $ref: "#/components/responses/Error"
  "/login/root":
    post:
      tags:
        - login
      summary: Root login
      operationId: rootLogin
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: SHA-256 encoded root password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AntboxError"
  /nodes:
    get:
      tags:
        - nodes
      summary: List nodes
      operationId: listNodes
      parameters:
        - name: parent
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    post:
      tags:
        - nodes
      summary: Create a node
      operationId: createNode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeMetadata"
      responses:
        "201":
          description: Node created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/-/find":
    post:
      tags:
        - nodes
      summary: Find nodes
      operationId: findNodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                - $ref: "#/components/schemas/NodeFilters"
              pageSize:
                type: integer
              pageToken:
                type: string
      responses:
        "200":
          description: A list of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/-/upload":
    post:
      tags:
        - nodes
      summary: Create a file node
      operationId: createFileNode
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - metadata
                - file
              properties:
                metadata:
                  $ref: "#/components/schemas/NodeMetadata"
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: File node created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}":
    get:
      tags:
        - nodes
      summary: Get a node
      operationId: getNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Node details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    patch:
      tags:
        - nodes
      summary: Update a node
      operationId: updateNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeMetadata"
      responses:
        "200":
          description: Node updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - nodes
      summary: Delete a node
      operationId: deleteNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: Node deleted
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/breadcrumbs":
    get:
      tags:
        - nodes
      summary: Get node breadcrumbs
      operationId: getNodeBreadcrumbs
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: A list of breadcrumb nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/copy":
    post:
      tags:
        - nodes
      summary: Copy a node
      operationId: copyNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
              properties:
                to:
                  type: string
                  format: uuid
      responses:
        "200":
          description: Node copied
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/duplicate":
    get:
      tags:
        - nodes
      summary: Duplicate a node
      operationId: duplicateNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Node duplicated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/evaluate":
    get:
      tags:
        - nodes
      summary: Evaluate a smart folder
      operationId: evaluateNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: A list of evaluated nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/export":
    get:
      tags:
        - nodes
      summary: Export a node
      operationId: exportNode
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Node content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          $ref: "#/components/responses/Error"
  "/nodes/{uuid}/-/upload":
    put:
      tags:
        - nodes
      summary: Update node content
      operationId: updateNodeContent
      parameters:
        - $ref: "#/components/parameters/UUID"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "204":
          description: Content updated
        default:
          $ref: "#/components/responses/Error"
  /templates:
    get:
      tags:
        - templates
      summary: List all templates
      operationId: listTemplates
      responses:
        "200":
          description: A list of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TemplateInfo"
        default:
          $ref: "#/components/responses/Error"
  "/templates/{uuid}":
    get:
      tags:
        - templates
      summary: Get a template
      operationId: getTemplate
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: Template content
          content:
            text/plain:
              schema:
                type: string
        default:
          $ref: "#/components/responses/Error"
  /users:
    get:
      tags:
        - users
      summary: List users
      operationId: listUsers
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    post:
      tags:
        - users
      summary: Create a user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeMetadata"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/users/{email}":
    get:
      tags:
        - users
      summary: Get a user by email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    put:
      tags:
        - users
      summary: Update a user by email
      operationId: updateUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeMetadata"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
  "/users/{uuid}":
    get:
      tags:
        - users
      summary: Get a user
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLike"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/UUID"
      responses:
        "204":
          description: User deleted
        default:
          $ref: "#/components/responses/Error"
components:
  schemas:
    Agent:
      type: object
      required:
        - uuid
        - title
        - description
        - owner
        - createdTime
        - modifiedTime
        - model
        - temperature
        - maxTokens
        - reasoning
        - useTools
        - systemInstructions
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        owner:
          type: string
          format: uuid
        createdTime:
          type: string
          format: date-time
        modifiedTime:
          type: string
          format: date-time
        model:
          type: string
        temperature:
          type: number
        maxTokens:
          type: integer
        reasoning:
          type: boolean
        useTools:
          type: boolean
        systemInstructions:
          type: string
        structuredAnswer:
          type: string
    ApiKey:
      type: object
      required:
        - uuid
        - group
        - owner
      properties:
        uuid:
          type: string
          format: uuid
        group:
          type: string
          format: uuid
        owner:
          type: string
          format: email
        description:
          type: string
        secret:
          type: string
    AntboxError:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
        message:
          type: string
    ApiKeyNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        group:
          type: string
          format: uuid
        secret:
          type: string
    AspectNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        filters:
          type: array
          items:
            type: object
        properties:
          type: array
          items:
            $ref: "#/components/schemas/AspectProperty"
    AspectProperty:
      type: object
      required:
        - name
        - title
        - type
      properties:
        name:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            ["uuid", "string", "number", "boolean", "object", "array", "file"]
        arrayType:
          type: string
          enum: ["string", "number", "uuid", "object"]
        stringMimetype:
          type: string
        readonly:
          type: boolean
        validationRegex:
          type: string
        validationList:
          type: array
          items:
            type: string
        validationFilters:
          type: array
          items:
            type: object
        required:
          type: boolean
        searchable:
          type: boolean
        default:
          type: object
          nullable: true
    AnswerOptions:
      type: object
      properties:
        context:
          type: object
          additionalProperties: true
    Aspect:
      type: object
      required:
        - uuid
        - title
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        filters:
          type: array
          items:
            type: array
            items:
              type: object
        properties:
          type: object
          additionalProperties:
            type: object
            properties:
              type:
                type: string
              title:
                type: string
              description:
                type: string
              required:
                type: boolean
              readonly:
                type: boolean
              default:
                type: object
    ChatOptions:
      type: object
      properties:
        context:
          type: object
          additionalProperties: true
        parent:
          type: string
          format: uuid
    DocInfo:
      type: object
      required:
        - id
        - title
        - mimetype
      properties:
        id:
          type: string
        title:
          type: string
        mimetype:
          type: string
    FeatureNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        size:
          type: integer
        name:
          type: string
        exposeAction:
          type: boolean
        runOnCreates:
          type: boolean
        runOnUpdates:
          type: boolean
        runManually:
          type: boolean
        filters:
          type: array
          items:
            type: array
            items:
              type: object
        exposeExtension:
          type: boolean
        exposeAITool:
          type: boolean
        runAs:
          type: string
        groupsAllowed:
          type: array
          items:
            type: string
            format: uuid
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/FeatureParameter"
        returnType:
          type: string
          enum:
            - string
            - number
            - boolean
            - array
            - object
            - file
            - void
        returnDescription:
          type: string
        returnContentType:
          type: string
    FeatureParameter:
      type: object
      required:
        - name
        - type
        - required
      properties:
        name:
          type: string
        type:
          type: string
          enum: ["string", "number", "boolean", "object", "array", "file"]
        arrayType:
          type: string
          enum: ["string", "number", "file", "object"]
        contentType:
          type: string
        required:
          type: boolean
        description:
          type: string
        defaultValue:
          type: object
          nullable: true
    FilterOperator:
      type: string
      description: The comparison or logical operator for filtering.
      enum:
        - "=="
        - "<="
        - ">="
        - "<"
        - ">"
        - "!="
        - "~=" # Note: OpenAPI does not enforce unique enums, but listing "~=" twice is non-standard.
        - "in"
        - "not-in"
        - "match"
        - "contains"
        - "contains-all"
        - "contains-any"
        - "not-contains"
        - "contains-none"

    NodeFilter:
      type: array
      description: A single filter tuple #: [field: string, operator: FilterOperator, value: unknown].
      # Represents a tuple (fixed length array with different types for each item)
      items:
        - type: string # field: string
        - $ref: "#/components/schemas/FilterOperator" # operator: FilterOperator
        - {} # value: unknown (empty schema allows any type)
      minItems: 3
      maxItems: 3

    NodeFilters1D:
      type: array
      description: An array of NodeFilter tuples (AND/OR logic implied by the endpoint).
      items:
        $ref: "#/components/schemas/NodeFilter"

    NodeFilters2D:
      type: array
      description: An array of NodeFilters1D arrays (representing nested logic, e.g., OR groups of AND filters).
      items:
        $ref: "#/components/schemas/NodeFilters1D"

    NodeFilters:
      description: Either a 1D array of filters or a 2D array of filters.
      oneOf:
        - $ref: "#/components/schemas/NodeFilters1D"
        - $ref: "#/components/schemas/NodeFilters2D"
    Permission:
      type: string
      enum:
        - Read
        - Write
        - Export
    Permissions:
      type: object
      properties:
        group:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        authenticated:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        anonymous:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        advanced:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Permission"
    BaseNode:
      type: object
      required:
        - uuid
        - fid
        - title
        - mimetype
        - parent
        - createdTime
        - modifiedTime
        - owner
      properties:
        uuid:
          type: string
          format: uuid
        fid:
          type: string
        title:
          type: string
        description:
          type: string
        mimetype:
          type: string
        parent:
          type: string
          format: uuid
        createdTime:
          type: string
          format: date-time
        modifiedTime:
          type: string
          format: date-time
        owner:
          type: string
          format: email
        fulltext:
          type: string
        permissions:
          $ref: "#/components/schemas/Permissions"
    FileNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        size:
          type: integer
        aspects:
          type: array
          items:
            type: string
            format: uuid
        properties:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
        related:
          type: array
          items:
            type: string
            format: uuid
    FolderNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        aspects:
          type: array
          items:
            type: string
            format: uuid
        filters:
          type: array
          items:
            type: object
        group:
          type: string
          format: uuid
        onCreate:
          type: array
          items:
            type: string
        onDelete:
          type: array
          items:
            type: string
        onUpdate:
          type: array
          items:
            type: string
        permissions:
          $ref: "#/components/schemas/Permissions"
        properties:
          type: object
          additionalProperties: true
        related:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
    GroupNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
    MetaNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        aspects:
          type: array
          items:
            type: string
            format: uuid
        properties:
          type: object
          additionalProperties: true
        related:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
    SmartFolderNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        filters:
          type: array
          items:
            type: object
    UserNode:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseNode"
      properties:
        email:
          type: string
          format: email
        group:
          type: string
          format: uuid
        groups:
          type: array
          items:
            type: string
            format: uuid
    NodeLike:
      oneOf:
        - $ref: "#/components/schemas/ApiKeyNode"
        - $ref: "#/components/schemas/AspectNode"
        - $ref: "#/components/schemas/FeatureNode"
        - $ref: "#/components/schemas/FileNode"
        - $ref: "#/components/schemas/FolderNode"
        - $ref: "#/components/schemas/GroupNode"
        - $ref: "#/components/schemas/MetaNode"
        - $ref: "#/components/schemas/SmartFolderNode"
        - $ref: "#/components/schemas/UserNode"
    NodeMetadata:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        fid:
          type: string
        title:
          type: string
        name:
          type: string
        description:
          type: string
        mimetype:
          type: string
        size:
          type: integer
        parent:
          type: string
          format: uuid
        createdTime:
          type: string
          format: date-time
        modifiedTime:
          type: string
          format: date-time
        owner:
          type: string
          format: email
        aspects:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
        related:
          type: array
          items:
            type: string
            format: uuid
        properties:
          type: object
          additionalProperties: true
        fulltext:
          type: string
        filters:
          type: object
        group:
          type: string
          format: uuid
        groups:
          type: array
          items:
            type: string
            format: uuid
        email:
          type: string
          format: email
        secret:
          type: string
        onCreate:
          type: array
          items:
            type: string
        onUpdate:
          type: array
          items:
            type: string
        onDelete:
          type: array
          items:
            type: string
        permissions:
          $ref: "#/components/schemas/Permissions"
        runManually:
          type: boolean
        runAs:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/FeatureParameter"
        returnType:
          type: string
          enum:
            ["string", "number", "boolean", "array", "object", "file", "void"]
        returnDescription:
          type: string
        returnContentType:
          type: string
        groupsAllowed:
          type: array
          items:
            type: string
            format: uuid
        runOnCreates:
          type: boolean
        runOnUpdates:
          type: boolean
        runOnDeletes:
          type: boolean
        exposeAction:
          type: boolean
        exposeExtension:
          type: boolean
        exposeAITool:
          type: boolean
        model:
          type: string
        temperature:
          type: number
        maxTokens:
          type: integer
        reasoning:
          type: boolean
        useTools:
          type: boolean
        systemInstructions:
          type: string
        structuredAnswer:
          type: string
    TemplateInfo:
      type: object
      required:
        - id
        - title
        - mimetype
      properties:
        id:
          type: string
        title:
          type: string
        mimetype:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    UUID:
      name: uuid
      in: path
      required: true
      schema:
        type: string
        format: uuid
  responses:
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AntboxError"
