import { Context, Router } from "@oak/oak";
import type { AntboxTenant } from "api/antbox_tenant.ts";
import { processError } from "api/process_error.ts";
import { ContextWithParams } from "./context_with_params.ts";
import { getTenant } from "./get_tenant.ts";
import { processEither } from "./process_either.ts";
import { sendInternalServerError } from "./send_response.ts";

export default function (tenants: AntboxTenant[]) {
  const extRouter = new Router({ prefix: "/ext" });

  const runHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).extService;
    const request = await fromOakRequest(ctx.request);

    return service
      .run(ctx.params.uuid, request)
      .then((resOrErr) => {
        if (resOrErr.isLeft()) {
          return sendInternalServerError(ctx, resOrErr.value);
        }

        return writeResponse(resOrErr.value, ctx);
      })
      .catch((err) => processError(err));
  };

  const listHandler = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).extService;

    return service
      .list()
      .then((r) => processEither(ctx, r))
      .catch((err) => processError(err));
  };

  const getHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).extService;

    return service
      .get(ctx.params.uuid)
      .then((r) => processEither(ctx, r))
      .catch((err) => processError(err));
  };

  const deleteHandler = (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).extService;
    const authCtx = ctx;

    return service
      .delete(authCtx, ctx.params.uuid)
      .then((r) => processEither(ctx, r))
      .catch((err) => processError(err));
  };

  const exportHandler = (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).extService;
    const uuid = ctx.params.uuid;

    return Promise.all([service.get(uuid), service.export(uuid)])
      .then(([node, blob]) => {
        if (node.isLeft()) {
          return processError(node.value);
        }

        if (blob.isLeft()) {
          return processError(blob.value);
        }

        ctx.response.headers.set("Content-Type", "application/javascript");
        ctx.response.headers.set("Content-length", blob.value.size.toString());
        ctx.response.headers.set(
          "Content-Disposition",
          `attachment; filename="${node.value.title}.js"`,
        );

        ctx.response.type = "blob";
        ctx.response.body = blob.value;
      })
      .catch((err) => processError(err));
  };

  const updateHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).extService;
    const authCtx = ctx;

    const fieldsOrUndefined = await ctx.request.body({ type: "json" }).value;

    if (fieldsOrUndefined === undefined) {
      return sendInternalServerError(ctx);
    }

    return service
      .update(authCtx, ctx.params.uuid, fieldsOrUndefined)
      .then((r) => processEither(ctx, r))
      .catch((err) => processError(err));
  };

  extRouter.get("/:uuid/-/run", runHandler);
  extRouter.post("/:uuid/-/run", runHandler);

  extRouter.get("/", listHandler);
  extRouter.get("/:uuid", getHandler);
  extRouter.delete("/:uuid", deleteHandler);
  extRouter.get("/:uuid/-/export", exportHandler);

  extRouter.patch("/:uuid", updateHandler);

  return extRouter;
}

async function fromOakRequest(request: OakRequest): Promise<Request> {
  const headers = new Headers();
  for (const [key, value] of request.headers.entries()) {
    headers.set(key, value);
  }

  return new Request(request.url, {
    method: request.method,
    headers,
    body: request.hasBody ? await request.body({ type: "stream" }).value : null,
  });
}

function writeResponse(response: globalThis.Response, ctx: Context) {
  ctx.response.headers.set(
    "Content-Type",
    response.headers.get("Content-Type")!,
  );
  ctx.response.status = response.status;
  ctx.response.body = response.body;
}
