{
	"info": {
		"_postman_id": "c4d5e6f7-g8h9-0123-cdef-456789012345",
		"name": "Antbox Skills API",
		"description": "Skills management endpoints for Antbox - skills are the core functional units that provide dynamic features through actions, extensions, or MCP tools.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34567890"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jwt');",
									"    pm.expect(jsonData.jwt).to.be.a('string');",
									"    pm.expect(jsonData.jwt.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Store JWT token for subsequent requests\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.jwt) {",
									"        pm.collectionVariables.set(\"jwt_token\", jsonData.jwt);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{root_password_hash}}"
						},
						"url": {
							"raw": "{{base_url}}/login/root",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"root"
							]
						},
						"description": "Authenticate as root user using SHA256 hashed password"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for Antbox API"
		},
		{
			"name": "Skills Management",
			"item": [
				{
					"name": "List All Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Skills have required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        var skill = jsonData[0];",
									"        pm.expect(skill).to.have.property('uuid');",
									"        pm.expect(skill).to.have.property('title');",
									"        pm.expect(skill).to.have.property('fid');",
									"        ",
									"        // Store first skill UUID for other tests",
									"        pm.collectionVariables.set(\"skill_uuid\", skill.uuid);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills"
							]
						},
						"description": "Retrieve a list of all skills in the system"
					},
					"response": []
				},
				{
					"name": "Create New Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has skill properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('fid');",
									"    pm.expect(jsonData.title).to.eql('Test Skill');",
									"});",
									"",
									"pm.test(\"Store created skill UUID\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.uuid) {",
									"        pm.collectionVariables.set(\"created_skill_uuid\", jsonData.uuid);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Skill\",\n  \"description\": \"A test skill created via API\",\n  \"code\": \"export default function testSkill() { return 'Hello from test skill!'; }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/skills",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills"
							]
						},
						"description": "Create a new skill in the system"
					},
					"response": []
				},
				{
					"name": "Get Skill by UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has skill properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('fid');",
									"});",
									"",
									"pm.test(\"UUID matches request parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    var requestedUuid = pm.collectionVariables.get('skill_uuid') || pm.collectionVariables.get('created_skill_uuid');",
									"    pm.expect(jsonData.uuid).to.eql(requestedUuid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/{{skill_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"{{skill_uuid}}"
							]
						},
						"description": "Retrieve a specific skill by its UUID"
					},
					"response": []
				},
				{
					"name": "Update Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated skill properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData.title).to.eql('Updated Test Skill');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Test Skill\",\n  \"description\": \"An updated test skill\",\n  \"code\": \"export default function updatedTestSkill() { return 'Hello from updated test skill!'; }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/skills/{{created_skill_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"{{created_skill_uuid}}"
							]
						},
						"description": "Update an existing skill by its UUID"
					},
					"response": []
				},
				{
					"name": "Delete Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/{{created_skill_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"{{created_skill_uuid}}"
							]
						},
						"description": "Delete a skill by its UUID"
					},
					"response": []
				}
			],
			"description": "Core skills management operations - create, read, update, delete skills"
		},
		{
			"name": "Skills Export & Actions",
			"item": [
				{
					"name": "Export Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content type is JavaScript\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/javascript');",
									"});",
									"",
									"pm.test(\"Response has Content-Disposition header\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/{{skill_uuid}}/-/export?type=skill",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"{{skill_uuid}}",
								"-",
								"export"
							],
							"query": [
								{
									"key": "type",
									"value": "skill",
									"description": "Export type (skill, action, extension, mcp)"
								}
							]
						},
						"description": "Export skill as JavaScript file with optional type filtering"
					},
					"response": []
				},
				{
					"name": "List Action-Exposed Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Action skills have required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        var actionSkill = jsonData[0];",
									"        pm.expect(actionSkill).to.have.property('uuid');",
									"        pm.expect(actionSkill).to.have.property('title');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/-/actions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"-",
								"actions"
							]
						},
						"description": "List skills that are exposed as actions"
					},
					"response": []
				},
				{
					"name": "Execute Skill Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has execution result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('result');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"parameters\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/skills/{{skill_uuid}}/-/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"{{skill_uuid}}",
								"-",
								"execute"
							]
						},
						"description": "Execute a skill as an action with parameters"
					},
					"response": []
				}
			],
			"description": "Skills export functionality and action execution"
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Unauthorized Request (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorCode');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills"
							]
						},
						"description": "Test unauthorized access without JWT token"
					},
					"response": []
				},
				{
					"name": "Invalid UUID Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorCode');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/invalid-uuid-format",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"invalid-uuid-format"
							]
						},
						"description": "Test bad request with invalid UUID format"
					},
					"response": []
				},
				{
					"name": "Skill Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorCode');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/skills/550e8400-e29b-41d4-a716-446655440000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills",
								"550e8400-e29b-41d4-a716-446655440000"
							]
						},
						"description": "Test not found error with valid but non-existent UUID"
					},
					"response": []
				},
				{
					"name": "Invalid Skill Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorCode');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invalid_field\": \"missing required fields\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/skills",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"skills"
							]
						},
						"description": "Test skill creation with invalid data"
					},
					"response": []
				}
			],
			"description": "Tests for various error scenarios and edge cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// You can add global setup logic here"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has proper headers\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:7180",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "skill_uuid",
			"value": "550e8400-e29b-41d4-a716-446655440001",
			"type": "string"
		},
		{
			"key": "created_skill_uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "root_password_hash",
			"value": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
			"type": "string"
		}
	]
}
