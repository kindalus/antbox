openapi: 3.1.0
info:
  title: Antbox API
  description: |
    Antbox API provides access to the complete Antbox platform functionality including
    node management, feature execution, AI agents, and user management.

    ## Authentication

    The API supports multiple authentication methods:

    1. **JWT Bearer Token**: Use `Authorization: Bearer <token>` header
       - User tokens: Obtained through external OAuth/OIDC providers
       - Root token: Obtained via `/login/root` endpoint

    2. **API Key**: Use `Authorization: ApiKey <key>` header or `api_key` query parameter
       - API keys are associated with groups and inherit group permissions
       - Create API keys via the `/api-keys` endpoint

    3. **Anonymous Access**: No authentication required for public endpoints
       - Limited permissions apply to anonymous users

    Most endpoints require authentication, but some allow anonymous access with restricted permissions.
  version: 2.0.0
  contact:
    name: Antbox Team
  license:
    name: MIT

servers:
  - url: http://localhost:7180/v2
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []
  - ApiKeyQuery: []
  - {} # Anonymous access allowed

paths:
  # Authentication
  /login/root:
    post:
      tags:
        - Authentication
      summary: Root user login
      description: |
        Authenticate as root user using SHA256 hashed password.
        Returns a JWT token that can be used for subsequent API calls as root user.
      security: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: SHA256 hashed root password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    description: JWT token for authentication
        "400":
          $ref: "#/components/responses/BadRequest"

  # Features
  /features:
    get:
      tags:
        - Features
      summary: List all features
      description: |
        Retrieve a list of all features that are exposed as features.
        Features are executable code units that can perform various operations.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of features
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Features
      summary: Create or replace feature
      description: Create a new feature or replace an existing one by uploading a file
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Feature file (JavaScript/TypeScript)
              required:
                - file
      responses:
        "201":
          description: Feature created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /features/{uuid}:
    get:
      tags:
        - Features
      summary: Get feature by UUID
      description: Retrieve a specific feature by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Feature details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    put:
      tags:
        - Features
      summary: Update feature
      description: Update an existing feature by uploading a new file
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Feature file (JavaScript/TypeScript)
              required:
                - file
      responses:
        "200":
          description: Feature updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - Features
      summary: Delete feature
      description: Delete a feature by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: Feature deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /features/{uuid}/export:
    get:
      tags:
        - Features
      summary: Export feature
      description: Export feature code
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Exported feature code
          content:
            application/javascript:
              schema:
                type: string
                description: JavaScript code for the feature
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Actions
  /actions:
    get:
      tags:
        - Actions
      summary: List all actions
      description: |
        Retrieve a list of all features that are exposed as actions.
        Actions are features that can be executed on selected nodes.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of action-exposed features
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /actions/{uuid}/run:
    post:
      tags:
        - Actions
      summary: Run an action
      description: |
        Execute a feature as an action on the specified nodes.
        Actions operate on a collection of node UUIDs.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionRunRequest"
      responses:
        "200":
          description: Action execution result
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Extensions
  /extensions:
    get:
      tags:
        - Extensions
      summary: List all extensions
      description: |
        Retrieve a list of all features that are exposed as extensions.
        Extensions are features that can be executed via HTTP requests.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of extension-exposed features
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /extensions/{uuid}/run:
    post:
      tags:
        - Extensions
      summary: Run an extension
      description: |
        Execute a feature as an extension with the full HTTP request context.
        Extensions have access to the complete request object.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Request body passed to the extension
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: true
              description: Form data passed to the extension
      responses:
        "200":
          description: Extension execution result
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
            text/html:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # AI Tools
  /ai-tools:
    get:
      tags:
        - AI Tools
      summary: List all AI tools
      description: |
        Retrieve a list of all features that are exposed as AI tools.
        AI tools are features that can be used by AI agents.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of AI tool-exposed features
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /ai-tools/{uuid}/run:
    post:
      tags:
        - AI Tools
      summary: Run an AI tool
      description: |
        Execute a feature as an AI tool with the provided parameters.
        AI tools are designed to be called by AI agents.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Parameters for the AI tool execution
      responses:
        "200":
          description: AI tool execution result
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Agents
  /agents:
    get:
      tags:
        - Agents
      summary: List agents
      description: |
        Retrieve a list of all AI agents configured in the system.
        Agents are AI assistants that can chat and answer questions.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Agents
      summary: Create or replace agent
      description: |
        Create a new AI agent or replace an existing one.
        Agents require system instructions and can use various AI models.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentCreate"
      responses:
        "201":
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /agents/{uuid}:
    get:
      tags:
        - Agents
      summary: Get agent by UUID
      description: Retrieve a specific AI agent by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - Agents
      summary: Delete agent
      description: Delete an AI agent by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: Agent deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /agents/{uuid}/-/chat:
    post:
      tags:
        - Agents
      summary: Chat with agent
      description: |
        Send a message to an AI agent and receive a conversational response.
        Supports file attachments and conversation history.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentChatRequest"
          multipart/form-data:
            schema:
              type: object
              properties:
                input:
                  type: string
                  description: JSON string containing {text, options} structure
                file0:
                  type: string
                  format: binary
                  description: Optional file attachment (can include multiple files as file0, file1, etc.)
              required:
                - input
      responses:
        "200":
          description: Chat response from agent
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /agents/{uuid}/-/answer:
    post:
      tags:
        - Agents
      summary: Get answer from agent
      description: |
        Ask a question to an AI agent and receive a direct answer.
        Similar to chat but focused on question-answering scenarios.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentAnswerRequest"
          multipart/form-data:
            schema:
              type: object
              properties:
                input:
                  type: string
                  description: JSON string containing {text, options} structure
                file0:
                  type: string
                  format: binary
                  description: Optional file attachment (can include multiple files as file0, file1, etc.)
              required:
                - input
      responses:
        "200":
          description: Answer from agent
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /agents/rag/-/chat:
    post:
      tags:
        - Agents
      summary: RAG chat
      description: |
        Perform Retrieval-Augmented Generation (RAG) chat using the knowledge base.
        This searches relevant documents and generates responses based on them.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RagChatRequest"
      responses:
        "200":
          description: RAG chat response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # API Keys
  /api-keys:
    get:
      tags:
        - API Keys
      summary: List API keys
      description: |
        Retrieve a list of all API keys.
        API keys provide programmatic access to the Antbox API.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - API Keys
      summary: Create API key
      description: |
        Create a new API key for programmatic access.
        API keys are associated with groups for permission management.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyCreate"
      responses:
        "201":
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /api-keys/{uuid}:
    get:
      tags:
        - API Keys
      summary: Get API key by UUID
      description: Retrieve a specific API key by its UUID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: API key details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: Delete an API key by its UUID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: API key deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Users
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Retrieve a list of all users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /users/{email}:
    get:
      tags:
        - Users
      summary: Get user by email
      description: Retrieve a specific user by their email address
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: User email address
          schema:
            type: string
            format: email
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: User email address
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /users/{uuid}:
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user by their UUID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: User deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Groups
  /groups:
    get:
      tags:
        - Groups
      summary: List groups
      description: Retrieve a list of all groups
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Groups
      summary: Create group
      description: Create a new group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /groups/{uuid}:
    get:
      tags:
        - Groups
      summary: Get group by UUID
      description: Retrieve a specific group by its UUID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Group details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    put:
      tags:
        - Groups
      summary: Update group
      description: Update an existing group's information
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
      responses:
        "200":
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - Groups
      summary: Delete group
      description: Delete a group by its UUID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: Group deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Nodes
  /nodes:
    get:
      tags:
        - Nodes
      summary: List nodes
      description: |
        Retrieve a list of nodes, optionally filtered by parent folder.
        If no parent is specified, returns nodes in the root folder.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
        - {} # Anonymous access with limited permissions
      parameters:
        - name: parent
          in: query
          description: Parent folder UUID to filter by
          schema:
            type: string
      responses:
        "200":
          description: List of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Node"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Nodes
      summary: Create node
      description: |
        Create a new node (file or folder) with metadata.
        For files, use the upload endpoint instead.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeCreate"
      responses:
        "201":
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/-/upload:
    post:
      tags:
        - Nodes
      summary: Upload file
      description: |
        Upload a file and create a new node. This is the preferred method
        for creating nodes with file content.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File content
                metadata:
                  type: string
                  description: JSON metadata for the node
              required:
                - file
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}:
    get:
      tags:
        - Nodes
      summary: Get node by UUID
      description: Retrieve a specific node by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
        - {} # Anonymous access with limited permissions
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Node details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    patch:
      tags:
        - Nodes
      summary: Update node
      description: Update a node's metadata by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeUpdate"
      responses:
        "200":
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - Nodes
      summary: Delete node
      description: Delete a node by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: Node deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/copy:
    post:
      tags:
        - Nodes
      summary: Copy node
      description: Create a copy of a node
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  description: Target parent folder UUID
              required:
                - to
      responses:
        "201":
          description: Node copied successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/duplicate:
    get:
      tags:
        - Nodes
      summary: Duplicate node
      description: Create a duplicate of a node in the same location
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "201":
          description: Node duplicated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/export:
    get:
      tags:
        - Nodes
      summary: Export node
      description: Export a node's content
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Exported node content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/evaluate:
    get:
      tags:
        - Nodes
      summary: Evaluate node
      description: Evaluate a node (for executable content)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Node evaluation result
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/-/find:
    post:
      tags:
        - Nodes
      summary: Find nodes with filters
      description: |
        Search for nodes using advanced filter criteria.
        Supports complex queries with multiple conditions.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: "#/components/schemas/NodeFilters"
                  description: Filter criteria to apply
                pageSize:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  default: 50
                  description: Number of results per page
                pageToken:
                  type: integer
                  minimum: 1
                  default: 1
                  description: Page number (1-based)
              required:
                - filters
      responses:
        "200":
          description: Filter results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeFilterResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/upload:
    put:
      tags:
        - Nodes
      summary: Update node with file upload
      description: |
        Update an existing node's file content and optionally its metadata.
        This replaces the node's content with the uploaded file.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: New file content
              required:
                - file
      responses:
        "200":
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /nodes/{uuid}/-/breadcrumbs:
    get:
      tags:
        - Nodes
      summary: Get folder breadcrumb trail
      description: Retrieve the breadcrumb trail for a folder node, showing the path from root to the current folder. Only works for folder nodes.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
        - {} # Anonymous access with limited permissions
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Breadcrumb trail for the folder
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Breadcrumb"
                description: Array of breadcrumb items from root to current folder
        "400":
          description: Bad request - node is not a folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Templates
  /templates/{uuid}:
    get:
      tags:
        - Templates
      summary: Get template content by UUID
      description: |
        Retrieve template content by UUID. Templates are pre-defined
        code structures for creating new features or nodes.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Template content
          content:
            text/typescript:
              schema:
                type: string
                description: TypeScript template content
            text/javascript:
              schema:
                type: string
                description: JavaScript template content
            application/json:
              schema:
                type: object
                description: JSON template content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  # Aspects
  /aspects:
    get:
      tags:
        - Aspects
      summary: List aspects
      description: |
        Retrieve a list of all aspects. Aspects define additional
        properties and behaviors for nodes.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      responses:
        "200":
          description: List of aspects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Aspect"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    post:
      tags:
        - Aspects
      summary: Create or replace aspect
      description: |
        Create a new aspect or replace an existing one.
        Aspects extend the functionality of nodes.
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AspectCreate"
      responses:
        "201":
          description: Aspect created or replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aspect"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /aspects/{uuid}:
    get:
      tags:
        - Aspects
      summary: Get aspect by UUID
      description: Retrieve a specific aspect by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "200":
          description: Aspect details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aspect"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - Aspects
      summary: Delete aspect
      description: Delete an aspect by its UUID
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
      responses:
        "204":
          description: Aspect deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

  /aspects/{uuid}/-/export:
    get:
      tags:
        - Aspects
      summary: Export aspect
      description: Export an aspect in various formats
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - ApiKeyQuery: []
      parameters:
        - $ref: "#/components/parameters/UuidPath"
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, javascript]
            default: json
      responses:
        "200":
          description: Exported aspect data
          content:
            application/json:
              schema:
                type: object
            application/javascript:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServiceUnavailable"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Supports both user JWT tokens and root user tokens.
        Root tokens are issued by the `/login/root` endpoint.
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        API Key authentication using the format "ApiKey <key>" in the Authorization header.
        Example: `Authorization: ApiKey abc123def456`
        API keys inherit the permissions of their associated group.
    ApiKeyQuery:
      type: apiKey
      in: query
      name: api_key
      description: |
        API Key authentication via query parameter. Use this as an alternative to the Authorization header.
        Example: `?api_key=abc123def456`

  parameters:
    UuidPath:
      name: uuid
      in: path
      required: true
      description: UUID of the resource
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request body
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    MethodNotAllowed:
      description: Method not allowed for this resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ServiceUnavailable:
      description: Service unavailable - the requested service is not available or not configured
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Feature:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the feature
        fid:
          type: string
          description: File identifier
        title:
          type: string
          description: Feature title
        name:
          type: string
          description: Feature name
        description:
          type: string
          description: Feature description
        mimetype:
          type: string
          description: MIME type of the feature
        parent:
          type: string
          description: Parent folder UUID
        owner:
          type: string
          description: Owner email
        group:
          type: string
          description: Group UUID
        exposeAsAction:
          type: boolean
          description: Whether feature is exposed as an action
        exposeAsExtension:
          type: boolean
          description: Whether feature is exposed as an extension
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/Parameter"
          description: Feature parameters
        returnType:
          type: string
          description: Return type of the feature
        returnDescription:
          type: string
          description: Description of the return value
        permissions:
          $ref: "#/components/schemas/Permissions"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        modifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp

    Parameter:
      type: object
      properties:
        name:
          type: string
          description: Parameter name
        type:
          type: string
          description: Parameter type
        description:
          type: string
          description: Parameter description
        required:
          type: boolean
          description: Whether parameter is required
        defaultValue:
          description: Default value for the parameter

    Node:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        fid:
          type: string
          description: File identifier
        title:
          type: string
          description: Node title
        mimetype:
          type: string
          description: MIME type
        parent:
          type: string
          description: Parent folder UUID
        owner:
          type: string
          description: Owner email
        group:
          type: string
          description: Group UUID
        permissions:
          $ref: "#/components/schemas/Permissions"
        size:
          type: integer
          description: Size in bytes (for files)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        modifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp

    NodeCreate:
      type: object
      required:
        - title
        - mimetype
      properties:
        title:
          type: string
          description: Node title
        mimetype:
          type: string
          description: MIME type
        parent:
          type: string
          description: Parent folder UUID
        content:
          type: string
          description: Node content (for text-based nodes)
        permissions:
          $ref: "#/components/schemas/Permissions"

    NodeUpdate:
      type: object
      properties:
        title:
          type: string
          description: Node title
        mimetype:
          type: string
          description: MIME type
        parent:
          type: string
          description: Parent folder UUID
        content:
          type: string
          description: Node content (for text-based nodes)
        permissions:
          $ref: "#/components/schemas/Permissions"

    Aspect:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        title:
          type: string
          description: Aspect title
        name:
          type: string
          description: Aspect name
        description:
          type: string
          description: Aspect description
        mimetype:
          type: string
          description: MIME type
        owner:
          type: string
          description: Owner email
        permissions:
          $ref: "#/components/schemas/Permissions"

    AspectCreate:
      type: object
      required:
        - title
        - name
        - mimetype
      properties:
        title:
          type: string
          description: Aspect title
        name:
          type: string
          description: Aspect name
        description:
          type: string
          description: Aspect description
        mimetype:
          type: string
          description: MIME type
        permissions:
          $ref: "#/components/schemas/Permissions"

    Permissions:
      type: object
      properties:
        group:
          type: array
          items:
            type: string
            enum: [Read, Write, Execute]
          description: Permissions for group members
        authenticated:
          type: array
          items:
            type: string
            enum: [Read, Write, Execute]
          description: Permissions for authenticated users
        anonymous:
          type: array
          items:
            type: string
            enum: [Read, Write, Execute]
          description: Permissions for anonymous users
        advanced:
          type: object
          additionalProperties: true
          description: Advanced permission settings

    NodeFilters:
      oneOf:
        - $ref: "#/components/schemas/NodeFilters1D"
        - $ref: "#/components/schemas/NodeFilters2D"
      description: Filter criteria for nodes - can be 1D array of filters (AND) or 2D array of filter groups (OR)

    NodeFilters1D:
      type: array
      description: Array of filters (all must match - AND logic)
      items:
        $ref: "#/components/schemas/NodeFilter"

    NodeFilters2D:
      type: array
      description: Array of filter groups (any group can match - OR logic)
      items:
        $ref: "#/components/schemas/NodeFilters1D"

    NodeFilter:
      type: array
      description: Single filter condition [field, operator, value]
      minItems: 3
      maxItems: 3
      items:
        oneOf:
          - type: string
          - type: number
          - type: boolean
          - type: array
      example: ["title", "contains", "test"]

    NodeFilterResult:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
          description: Array of matching nodes
        pageSize:
          type: integer
          description: Number of results per page
        pageToken:
          type: integer
          description: Current page number
      required:
        - nodes
        - pageSize
        - pageToken

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          additionalProperties: true
          description: Additional error details

    ActionRunRequest:
      type: object
      required:
        - uuids
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
          description: Array of node UUIDs to process with the action
        parameters:
          type: object
          additionalProperties: true
          description: Optional parameters for the action execution

    Agent:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the agent
        systemInstructions:
          type: string
          description: System instructions for the AI agent
        title:
          type: string
          description: Agent title
        description:
          type: string
          description: Agent description
        model:
          type: string
          description: AI model to use
        owner:
          type: string
          description: Owner email
        group:
          type: string
          description: Group UUID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        modifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp

    AgentCreate:
      type: object
      required:
        - systemInstructions
        - title
      properties:
        systemInstructions:
          type: string
          description: System instructions for the AI agent
        title:
          type: string
          description: Agent title
        description:
          type: string
          description: Agent description
        model:
          type: string
          description: AI model to use

    AgentChatRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Chat message to send to the agent
        options:
          type: object
          description: Optional chat options
          properties:
            history:
              type: array
              description: Conversation history
              items:
                type: object
            files:
              type: array
              description: File attachments
              items:
                type: object
            temperature:
              type: number
              minimum: 0
              maximum: 2
              description: Temperature for response generation
            maxTokens:
              type: integer
              description: Maximum tokens in the response
            instructions:
              type: string
              description: Additional system instructions

    AgentAnswerRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Query to send to the agent
        options:
          type: object
          description: Optional answer options
          properties:
            files:
              type: array
              description: File attachments
              items:
                type: object
            temperature:
              type: number
              minimum: 0
              maximum: 2
              description: Temperature for response generation
            maxTokens:
              type: integer
              description: Maximum tokens in the response
            instructions:
              type: string
              description: Additional system instructions

    RagChatRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Message for RAG chat
        options:
          type: object
          description: Optional RAG chat options
          properties:
            parent:
              type: string
              description: Folder UUID for scoped context search
            history:
              type: array
              description: Conversation history
              items:
                type: object
            temperature:
              type: number
              minimum: 0
              maximum: 2
              description: Temperature for response generation
            maxTokens:
              type: integer
              description: Maximum tokens in the response

    ApiKey:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the API key
        key:
          type: string
          description: The actual API key value
        group:
          type: string
          description: Group UUID associated with this key
        description:
          type: string
          description: Description of the API key
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: string
          description: Email of user who created the key

    ApiKeyCreate:
      type: object
      required:
        - group
      properties:
        group:
          type: string
          description: Group UUID to associate with this API key
        description:
          type: string
          description: Optional description for the API key

    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User display name
        group:
          type: string
          description: Group UUID
        role:
          type: string
          description: User role
        active:
          type: boolean
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    UserCreate:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User display name
        password:
          type: string
          description: User password (will be hashed)
        group:
          type: string
          description: Group UUID
        role:
          type: string
          description: User role

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: User display name
        password:
          type: string
          description: New password (will be hashed)
        group:
          type: string
          description: Group UUID
        role:
          type: string
          description: User role
        active:
          type: boolean
          description: Whether the user account is active

    Group:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the group
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        modifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp

    GroupCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description

    GroupUpdate:
      type: object
      properties:
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description

    Template:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the template
        mimetype:
          type: string
          description: MIME type of the template (e.g., text/typescript, text/javascript, application/json)
        size:
          type: integer
          description: Size of the template file in bytes
      required:
        - uuid
        - mimetype
        - size

    Breadcrumb:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: UUID of the folder in the breadcrumb trail
        title:
          type: string
          description: Title of the folder
      required:
        - uuid
        - title

tags:
  - name: Authentication
    description: Authentication and authorization endpoints
  - name: Features
    description: Feature management and execution
  - name: Actions
    description: Action execution endpoints for running features as actions
  - name: Extensions
    description: Extension execution endpoints for running features as extensions
  - name: AI Tools
    description: AI tool execution endpoints for running features as AI tools
  - name: Agents
    description: AI agent management and interaction endpoints
  - name: API Keys
    description: API key management endpoints
  - name: Users
    description: User account management endpoints
  - name: Groups
    description: Group management endpoints
  - name: Nodes
    description: Node management operations
  - name: Templates
    description: Template management operations
  - name: Aspects
    description: Aspect management operations
