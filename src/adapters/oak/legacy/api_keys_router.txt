import { type Context, Router, Status } from "@oak/oak";
import { type AntboxTenant } from "api/antbox_tenant.ts";
import { processError } from "api/process_error.ts";
import { AntboxError } from "shared/antbox_error.ts";
import { type Either } from "shared/either.ts";
import { getTenant } from "./get_tenant.ts";
import { sendOK } from "./send_response.ts";
import { ContextWithParams } from "./context_with_params.ts";

export default function (tenants: AntboxTenant[]) {
  const listHandler = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).apiKeyService;

    return service
      .list(ctx)
      .then((result) => {
        return sendOK(ctx, result);
      })
      .catch((err) => processError(err));
  };

  const getHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).apiKeyService;
    return service
      .get(ctx.params.uuid)
      .then((result) => {
        if (result.isLeft()) {
          return processError(result.value);
        }

        ctx.response.status = Status.OK;
        ctx.response.type = "json";
        ctx.response.body = result.value;
      })
      .catch((err) => processError(err));
  };

  const createHandler = async (ctx: Context) => {
    const service = getTenant(ctx, tenants).apiKeyService;
    const body = await ctx.request.body().value;

    return service
      .create(ctx, body.group, body.owner, body.description)
      .then((result) => processEither(ctx, result))
      .catch((err) => processError(err));
  };

  const deleteHandler = async (ctx: ContextWithParams) => {
    const service = getTenant(ctx, tenants).apiKeyService;
    return service
      .delete(ctx, ctx.params.uuid)
      .then((result) => processEither(ctx, result))
      .catch((err) => processError(err));
  };

  const apiKeysRouter = new Router({ prefix: "/api-keys" });

  apiKeysRouter.get("/:uuid", getHandler);

  apiKeysRouter.get("/", listHandler);

  apiKeysRouter.post("/", createHandler);

  apiKeysRouter.delete("/:uuid", deleteHandler);

  return apiKeysRouter;
}

function processEither<L extends AntboxError, R>(
  ctx: Context,
  result: Either<L, R>,
) {
  if (result.isLeft()) {
    return processError(result.value);
  }

  return sendOK(ctx, result.value as Record<string, unknown>);
}
